name: 编译内核

on: [ push, workflow_dispatch ]

env:
  AOSP_PREBUILTS_BRANCH: android12-release
  AOSP_CLANG_VERSION: r416183b

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:

    - name: 安装软件包
      run: sudo apt update && sudo apt install -y binutils-arm-linux-gnueabi binutils-aarch64-linux-gnu ccache

    - uses: actions/checkout@v4
      with: { path: kernel }

    - name: 初始化子模块
      working-directory: kernel
      run: git submodule update --init --remote --recursive

    - name: 获取版本信息
      id: versions
      working-directory: kernel
      run: |
        echo KERNELSU=$(cd KernelSU && expr 10606 + $(git rev-list --count main)) >> $GITHUB_OUTPUT
        echo SUSFS=$(cat include/linux/susfs.h | grep -E '^#define SUSFS_VERSION' | cut -d' ' -f3 | sed 's/"//g') >> $GITHUB_OUTPUT

    - name: 缓存Gcc
      id: gcc
      uses: actions/cache@v4
      with:
        path: |
          gcc-aarch64
          gcc-arm
        key: gcc-${{ env.AOSP_PREBUILTS_BRANCH }}

    - name: 下载Gcc
      if: steps.gcc.outputs.cache-hit != 'true'
      run: |
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 --depth=1 gcc-aarch64 -b ${{ env.AOSP_PREBUILTS_BRANCH }}
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 --depth=1 gcc-arm -b ${{ env.AOSP_PREBUILTS_BRANCH }}

    - name: 缓存Clang
      id: clang
      uses: actions/cache@v4
      with:
        path: clang
        key: clang-${{ env.AOSP_PREBUILTS_BRANCH }}-${{ env.AOSP_CLANG_VERSION }}

    - name: 下载Clang
      if: steps.clang.outputs.cache-hit != 'true'
      run: |
        mkdir -p clang
        curl -LSs "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.AOSP_PREBUILTS_BRANCH }}/clang-${{ env.AOSP_CLANG_VERSION }}.tar.gz" | tar xz -C clang

    - name: 缓存ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: kernel
        restore-keys: kernel
        max-size: 5G

    - name: 编译内核
      working-directory: kernel
      run: |
        export PATH=$GITHUB_WORKSPACE/clang/bin:$GITHUB_WORKSPACE/gcc-aarch64/bin:$GITHUB_WORKSPACE/gcc-arm/bin:$PATH
        make -s -j$(nproc --all) O=${{ runner.temp }}/make ARCH=arm64 mt6853-ss_defconfig CONFIG_KSU_MANUAL_HOOK=y CONFIG_KSU_SUSFS_SUS_SU=n
        make -s -j$(nproc --all) O=${{ runner.temp }}/make ARCH=arm64 CC="ccache clang" CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_ARM32=arm-linux-androideabi-

    - name: 打包AnyKernel3
      run: |
       git clone https://github.com/osm0sis/AnyKernel3 --depth=1 ak3
       cd ak3
       rm -rf .git .github LICENSE README.md
       cat >anykernel.sh <<EOF
       properties() { '
       kernel.string=Kernel for mt6853 with KernelSU@${{ steps.versions.outputs.KERNELSU }} SUSFS@${{ steps.versions.outputs.SUSFS }}
       do.devicecheck=0
       '; }
       block=auto
       is_slot_device=auto
       ramdisk_compression=auto
       patch_vbmeta_flag=auto
       . tools/ak3-core.sh
       split_boot
       flash_boot
       EOF
       cp ${{ runner.temp }}/make/arch/arm64/boot/Image.gz-dtb .
       zip -q -r AnyKernel3.zip *

    - name: 发布
      uses: softprops/action-gh-release@v2
      with:
        tag_name: awkoo
        name: Kernel build awkoo
        files: |
            ak3/AnyKernel3.zip
            ak3/Image.gz-dtb

